# -*- coding: utf-8 -*-
import re
import urllib
import scrapy
from scrapy.http import Request, FormRequest
from scrapy.selector import Selector
from kcc.items import Bills


def ROC2AD(text):
    matchTerm = re.search(u'''
        (?P<year>[\d]+)[\s]*年[\s]*
        (?P<month>[\d]+)[\s]*月[\s]*
        (?P<day>[\d]+)
    ''', text, re.X)
    if matchTerm:
        return '%04d-%02d-%02d' % (int(matchTerm.group('year'))+1911, int(matchTerm.group('month')), int(matchTerm.group('day')))
    else:
        return None

class Spider(scrapy.Spider):
    name = "bills_bug"
    allowed_domains = ["cissearch.kcc.gov.tw"]
    start_urls = ["http://cissearch.kcc.gov.tw/System/Proposal/Default.aspx",]
    download_delay = 0.5
    payload = {
        "ContentPlaceHolder1_ToolkitScriptManager1_HiddenField": "",
        "__EVENTTARGET": "ctl00$ContentPlaceHolder1$LinkButton1",
        "__EVENTARGUMENT": "",
        "__LASTFOCUS": "",
        "__VIEWSTATE": "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",
        "__VIEWSTATEENCRYPTED": "",
        "__EVENTVALIDATION": "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",
        "ctl00$txtKeyword": "",
        "ctl00$ContentPlaceHolder1$hidCurrentTab": "",
        "ctl00$ContentPlaceHolder1$uscPeriodSessionMeeting$ddlPeriod": "07",
        "ctl00$ContentPlaceHolder1$uscPeriodSessionMeeting$ddlSession": "0701",
        "ctl00$ContentPlaceHolder1$ddlCouncilor": "",
        "ctl00$ContentPlaceHolder1$ddlCategory": "",
        "ctl00$ContentPlaceHolder1$ddlProposalKind": "0",
        "ctl00$ContentPlaceHolder1$rblState": "",
        "ctl00$ContentPlaceHolder1$ddlState": "",
        "ctl00$ContentPlaceHolder1$txtKeyword": ""
    }

    def parse(self, response):
        sel = Selector(response)
        meetings = sel.xpath('//select[@id="ContentPlaceHolder1_uscPeriodSessionMeeting_ddlMeeting"]/option/@value').re('^\d+')
#       for meeting in ['07010003', '07010002']:
#           payload = self.payload.copy()
#           payload["ctl00$ContentPlaceHolder1$uscPeriodSessionMeeting$ddlMeeting"] = meeting
#           yield FormRequest("http://cissearch.kcc.gov.tw/System/Proposal/Default.aspx", formdata=payload, callback=self.parse_meeting, meta={'payload': payload, 'sitting': meeting}, dont_filter=True)
        for meeting in meetings:
            payload = self.payload.copy()
            payload["ctl00$ContentPlaceHolder1$uscPeriodSessionMeeting$ddlMeeting"] = meeting
            yield FormRequest("http://cissearch.kcc.gov.tw/System/Proposal/Default.aspx", formdata=payload, callback=self.parse_meeting, meta={'sitting': meeting}, dont_filter=True)

    def parse_meeting(self, response):
        meeting = response.request.meta['sitting']
        sel = Selector(response)
        tabs = sel.xpath('//div[@id="tabs"]/ul/li/a')
        for i in range(0, len(tabs)):
            type, count = tabs[i].xpath('text()').extract()
            count = re.sub('\D', '', count)
            if count:
                print meeting, type, count
                payload = self.payload.copy()
                payload["ctl00$ContentPlaceHolder1$uscPeriodSessionMeeting$ddlMeeting"] = meeting
                payload["ctl00$ContentPlaceHolder1$DataPager%d$ctl02$txtPageSize" % (i+1)] = count
                if i != 0:
                    payload["ctl00$ContentPlaceHolder1$btnGo%d" % (i+1)] = " Go "
                else:
                    payload["ctl00$ContentPlaceHolder1$btnGo"] = " Go "
                yield FormRequest("http://cissearch.kcc.gov.tw/System/Proposal/Default.aspx", formdata=payload, callback=self.parse_tab, meta={'sitting': meeting, 'type': tabs[i].xpath('text()').extract()[0], 'tab_id': 'tabs-%d' % (i+1)}, dont_filter=True)

    def parse_tab(self, response):
        sel = Selector(response)
        trs = sel.xpath('//div[@id="%s"]/div/table/tr' % response.request.meta['tab_id'])
        for tr in trs:
            tds = tr.xpath('td')
            if len(tds) > 1:
                item = Bills()
                item['sitting'] = response.request.meta['sitting']
                item['type'] = response.request.meta['type']
                item['last_action'] = tds[4].xpath('text()').extract()[0]
                detail = tds[3].xpath('@onclick').re(u'Detail.aspx(.+)')
                if detail:
                    param = re.sub(u'(amp;|&#39)', '', detail[0])
                    yield Request("http://cissearch.kcc.gov.tw/System/Proposal/Detail.aspx%s" % param, callback=self.parse_profile, meta={'item': item})
                else:
                    print tds[3].xpath('@onclick')

    def parse_profile(self, response):
        sel = Selector(response)
        item = response.request.meta['item']
        trs = sel.xpath('//table[@class="table03_blue"]/tr')
        motions = []
        for tr in trs:
            tds = tr.xpath('td')
            for i in range(0, len(tds), 2):
                if tds[i].xpath('text()')[0].re(u'類別'):
                    item['category'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'提案(人|單位)'):
                    item['proposed_by'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'承辦單位'):
                    item['brought_by'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'相關單位'):
                    item['related_units'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'連署人'):
                    item['petitioned_by'] = ''.join([re.sub('\s', '', x) for x in tds[i+1].xpath('text()').extract()])
                elif tds[i].xpath('text()')[0].re(u'案由'):
                    item['abstract'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'說明'):
                    if tds[i+1].xpath('p'):
                        item['description'] = '\n'.join([re.sub('\s', '', x) for x in tds[i+1].xpath('p/text()').extract()])
                    elif tds[i+1].xpath('table'):
                        item['description'] = '\n'.join([re.sub('\s', '', x) for x in tds[i+1].xpath('table/tbody/tr/td/p/text()').extract()])
                elif tds[i].xpath('text()')[0].re(u'辦法'):
                    item['methods'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'備註'):
                    item['remark'] = tds[i+1].xpath('text()').extract()[0].strip()
                elif tds[i].xpath('text()')[0].re(u'一讀\(交付\)'):
                    d = dict(zip(['resolution', 'date'], tds[i+1].xpath('span/text()').extract()))
                    d['motion'] = u'一讀(交付)'
                    motions.append(d)
                elif tds[i].xpath('text()')[0].re(u'委員會審查意見'):
                    motions.append(dict(zip(['motion', 'resolution', 'date'], [u'委員會審查意見', tds[i+1].xpath('text()').extract()[0].strip(), tds[i+1].xpath('span/text()').extract()[0]])))
                elif tds[i].xpath('text()')[0].re(u'二讀決議'):
                    motions.append(dict(zip(['motion', 'resolution', 'date'], [u'二讀決議', tds[i+1].xpath('text()').extract()[1].strip(), tds[i+1].xpath('span/text()').extract()[0]])))
                elif tds[i].xpath('text()')[0].re(u'三讀決議'):
                    motions.append(dict(zip(['motion', 'resolution', 'date'], [u'三讀決議', tds[i+1].xpath('text()').extract()[1].strip(), tds[i+1].xpath('span/text()').extract()[0]])))
        item['motions'] = motions
        item['links'] = response.url
        return item
